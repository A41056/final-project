name: Deploy Backend Services to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 654654461467.dkr.ecr.us-east-1.amazonaws.com
  ECS_CLUSTER: be-cluster
  EXECUTION_ROLE_ARN: arn:aws:iam::123456789012:role/ecsTaskExecutionRole

permissions:
  contents: read

jobs:
  deploy-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: be-user-api-task-service
            ecr_repo: user-api
            ecs_service: user-api-service
            task_def: .github/ecs/user-api-task-def.json
            container_name: user-api-container
            docker_context: ./Services/User
            dockerfile: User.API/Dockerfile

          - name: be-catalog-api-task-service
            ecr_repo: catalog-api
            ecs_service: catalog-api-service
            task_def: .github/ecs/catalog-api-task-def.json
            container_name: catalog-api-container
            docker_context: ./Services/Catalog
            dockerfile: Catalog.API/Dockerfile

          - name: be-basket-api-task-service
            ecr_repo: basket-api
            ecs_service: basket-api-service
            task_def: .github/ecs/basket-api-task-def.json
            container_name: basket-api-container
            docker_context: ./Services/Basket
            dockerfile: Basket.API/Dockerfile

          - name: be-review-api-task-service
            ecr_repo: review-api
            ecs_service: review-api-service
            task_def: .github/ecs/review-api-task-def.json
            container_name: review-api-container
            docker_context: ./Services/Review
            dockerfile: Review.API/Dockerfile

          - name: be-file-api-task-service
            ecr_repo: file-api
            ecs_service: file-api-service
            task_def: .github/ecs/file-api-task-def.json
            container_name: file-api-container
            docker_context: ./Services/Media
            dockerfile: Media.API/Dockerfile

          - name: be-order-api-task-service
            ecr_repo: order-api
            ecs_service: order-api-service
            task_def: .github/ecs/order-api-task-def.json
            container_name: order-api-container
            docker_context: ./Services/Ordering
            dockerfile: Ordering.API/Dockerfile

          - name: be-notification-api-task-service
            ecr_repo: notification-api
            ecs_service: notification-api-service
            task_def: .github/ecs/notification-api-task-def.json
            container_name: notification-api-container
            docker_context: ./Services/Notification
            dockerfile: Notification.API/Dockerfile

          - name: be-discount-api-task-service
            ecr_repo: discount-grpc
            ecs_service: discount-grpc-service
            task_def: .github/ecs/discount-grpc-task-def.json
            container_name: discount-grpc-container
            docker_context: ./Services/Discount/Discount.Grpc
            dockerfile: Dockerfile

          - name: be-yarp-apigateway-task-service
            ecr_repo: yarpapigateway
            ecs_service: yarpapigateway-service
            task_def: .github/ecs/yarpapigateway-task-def.json
            container_name: yarpapigateway-container
            docker_context: ./ApiGateways/YarpApiGateway
            dockerfile: Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ matrix.service.ecr_repo }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ matrix.service.dockerfile }} ${{ matrix.service.docker_context }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.service.task_def }}
          container-name: ${{ matrix.service.container_name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.service.ecs_service }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
